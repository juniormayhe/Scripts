##
# you can expose to host like this:
# kubectl port-forward svc/mongo 27017:27017 -n trulabelsas
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-account
  namespace: trulabelsas
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mongo-role
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["deployments"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mongo-role-binding
subjects:
  - kind: ServiceAccount
    name: mongo-account
    namespace: trulabelsas
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mongo-role
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-replicaset
  namespace: trulabelsas
spec:
  serviceName: "mongodb"
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      serviceAccount: mongo-account
      dnsPolicy: ClusterFirst
      containers:
      - name: mongodb
        image: mongo:6
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
        env:
        # - name: MONGO_INITDB_ROOT_USERNAME
        #   value: "admin"
        # - name: MONGO_INITDB_ROOT_PASSWORD
        #   value: "adminpassword"
        # - name: MONGO_REPLICA_SET_NAME
        #   value: "rs0"
        command: ["mongod"]
        args: ["--replSet", "rs0", "--bind_ip_all"]
  volumeClaimTemplates:
  - metadata:
      name: mongo-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb
#   namespace: trulabelsas
# spec:
#   type: ClusterIP
#   ports:
#   - port: 27017
#     targetPort: 27017
#   #clusterIP: None
#   selector:
#     app: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-loadbalancer
  namespace: trulabelsas
spec:
  type: LoadBalancer
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-0
#   namespace: trulabelsas
# spec:
#   type: ClusterIP
#   ports:
#   - port: 27017
#     targetPort: 27017
#   selector:
#     statefulset.kubernetes.io/pod-name: mongodb-replicaset-0

---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-1
#   namespace: trulabelsas
# spec:
#   type: ClusterIP
#   ports:
#   - port: 27017
#     targetPort: 27017
#   selector:
#     statefulset.kubernetes.io/pod-name: mongodb-replicaset-1

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-2
#   namespace: trulabelsas
# spec:
#   type: ClusterIP
#   ports:
#   - port: 27017
#     targetPort: 27017
#   selector:
#     statefulset.kubernetes.io/pod-name: mongodb-replicaset-2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: init-mongo
  namespace: trulabelsas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: init-mongo
  template:
    metadata:
      labels:
        app: init-mongo
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-mongo
        image: mongo:6
        command: ["sh", "-c", "
          while ! mongosh --quiet --host mongodb-replicaset-0.mongodb.trulabelsas.svc.cluster.local:27017 --eval 'db.runCommand({ ping: 1 }).ok' | grep 1 > /dev/null; do
            echo 'MongoDB replica is not ready yet. Retrying in 2 seconds...';
            sleep 2;
          done;

          echo 'Checking if the replica set is already initialized...';
          mongosh mongodb-replicaset-0.mongodb.trulabelsas.svc.cluster.local:27017/admin --eval '
            try {
              const status = rs.status();
              if (status.ok) {
                print(\"Replica set already initialized. Reconfiguring...\");
                const config = rs.conf();
                config.members.splice(1, 2);
                rs.reconfig(config, { force: true });
                rs.add({ _id: 1, host: \"mongodb-replicaset-1.mongodb.trulabelsas.svc.cluster.local:27017\" });
                rs.add({ _id: 2, host: \"mongodb-replicaset-2.mongodb.trulabelsas.svc.cluster.local:27017\" });
                print(\"Replicas added back to the replica set.\");
                quit();
              }
            } catch (e) {
              print(\"Replica set not initialized. Proceeding with initialization...\");
              rs.initiate({
                _id: \"rs0\",
                members: [
                    { _id: 0, host: \"mongodb-replicaset-0.mongodb.trulabelsas.svc.cluster.local:27017\" },
                    { _id: 1, host: \"mongodb-replicaset-1.mongodb.trulabelsas.svc.cluster.local:27017\" },
                    { _id: 2, host: \"mongodb-replicaset-2.mongodb.trulabelsas.svc.cluster.local:27017\" }
                ]
              });
            }
          ';
        "]
      containers:
      - name: mongodb
        image: mongo:6
        ports:
          - containerPort: 27017
        command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
